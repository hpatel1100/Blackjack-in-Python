import random

suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,
         'Queen':10, 'King':10, 'Ace':11}

playing = True

class Card:
    
    def __init__(self,suit,rank):
        self.suit = suit
        self.rank=rank
    
    def __str__(self):
        return self.rank + " of " + self.suit
    
class Deck:
    
    def __init__(self):
        self.deck = []
        for suit in suits:
            for rank in ranks:
                self.deck.append(Card(suit,rank))
                
    def __str__(self):
        deck_comp = ""
        for card in self.deck:
            deck_comp += "\n " + card.__str__()
        return "The deck has: " + deck_comp
    
    def shuffle(self):
        random.shuffle(self.deck)
        
    def deal(self):
        single_card = self.deck.pop()
        return single_card
    
class Hand:
    
    def __init__(self):
        self.cards = []
        self.value = 0
        self.aces = 0
    
    def add_card(self,card):
        self.cards.append(card)
        self.value += values[card.rank]
        
    def adjust_for_ace(self):
        while self.value > 21 and self.aces > 0:
            self.value -= 10
            self.aces = 1
        

class Chips:
    
    def __init__(self):
        self.total = 100  # This can be set to a default value or supplied by a user input
        self.bet = 0
        
    def win_bet(self):
        self.total += self.bet
    
    def lose_bet(self):
        self.total -= self.bet
        

def take_bet(chips):
    
    while True:
        try:
            chips.bet = int(input("What would you like to bet?"))
        except:
            print("Sorry, enter an integer")
        else:
            if chips.bet > chips.total:
                print("You do not have enought chips to place that bet, you have {}".format(chips.total))
            else:
                break
                
                
def hit(deck,hand):
    single_card = deck.deal()
    hand.add_card(single_card)
    hand.adjust_for_ace()
    
    
def hit_or_stand(deck,hand):
    global playing  # to control an upcoming while loop
    
    x = input("Would you like to hit or stand?")
    while True:
        if x[0].lower() == "h":
            hit(deck,hand)

        elif x[0].lower() == "s":
            print("Player stands, dealers turn")
            playing = False

        else:
            print("Sorry, I did not understand")
            continue

        break
        
def show_some(player,dealer):
    print("Dealers Hand: ")
    print("One card is hidden")
    print(dealer.cards[1])
    print("\n")
    print("Players Hand: ")
    for card in player.cards:
        print(card)
        
def show_all(player,dealer):
    print("Dealer Hand:")
    for card in dealer.cards:
        print(card)
    print("\n")
    print("Player Hand:")
    for card in player.cards:
        print(card)
        
def player_busts(player,dealer,chips):
    print("Player Busts!")
    chips.lose_bet

def player_wins(player,dealer,chips):
    print("Player Wins!")
    chips.win_bet

def dealer_busts(player,dealer,chips):
    print("Player Wins! Dealer Busts")
    chips.win_bet
    
def dealer_wins(player,dealer,chips):
    print("Dealer Wins!")
    chips.lose_bet
    
def push(player,dealer,chips):
    print("Dealer and Player tie! PUSH") 
    
